datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model EventType {
  id                      Int                          @id @default(autoincrement())
  title                   String
  slug                    String
  description             String?
  position                Int                          @default(0)
  locations               Json?
  length                  Int
  hidden                  Boolean                      @default(false)
  users                   User[]
  userId                  Int?
  team                    Team?                        @relation(fields: [teamId], references: [id])
  teamId                  Int?
  eventName               String?
  timeZone                String?
  periodType              EnumEventTypePeriodType      @default(UNLIMITED)
  periodStartDate         DateTime?
  periodEndDate           DateTime?
  periodDays              Int?
  periodCountCalendarDays Boolean?
  requiresConfirmation    Boolean                      @default(false)
  recurringEvent          Json?
  disableGuests           Boolean                      @default(false)
  hideCalendarNotes       Boolean                      @default(false)
  minimumBookingNotice    Int                          @default(120)
  beforeEventBuffer       Int                          @default(0)
  afterEventBuffer        Int                          @default(0)
  seatsPerTimeSlot        Int?
  schedulingType          EnumEventTypeSchedulingType?
  schedule                Schedule?                    @relation(fields: [scheduleId], references: [id])
  scheduleId              Int?
  price                   Int                          @default(0)
  currency                String                       @default("usd")
  slotInterval            Int?
  metadata                Json?
  successRedirectUrl      String?
  destinationCalendar     DestinationCalendar?
  bookings                Booking[]
  availability            Availability[]
  customInputs            EventTypeCustomInput[]
  webhooks                Webhook[]
  hashedLink              HashedLink?
  workflows               WorkflowsOnEventType[]

  @@unique([userId, slug])
  @@unique([teamId, slug])
}

model Credential {
  id                   Int                   @id @default(autoincrement())
  typeField            String                @map("type")
  key                  Json
  user                 User?                 @relation(fields: [userId], references: [id])
  userId               Int?
  appField             AppModel?             @relation(fields: [appId], references: [id])
  appId                String?
  destinationCalendars DestinationCalendar[]
}

model DestinationCalendar {
  id           Int         @id @default(autoincrement())
  integration  String
  externalId   String
  user         User?       @relation(fields: [userId], references: [id])
  userId       Int?        @unique
  booking      Booking?    @relation(fields: [bookingId], references: [id])
  bookingId    Int?        @unique
  eventType    EventType?  @relation(fields: [eventTypeId], references: [id])
  eventTypeId  Int?        @unique
  credential   Credential? @relation(fields: [credentialId], references: [id])
  credentialId Int?
}

model User {
  id                   Int                      @id @default(autoincrement())
  username             String?                  @unique
  name                 String?
  email                String                   @unique
  emailVerified        DateTime?
  password             String?
  bio                  String?
  avatar               String?
  timeZone             String                   @default("Europe/London")
  weekStart            String                   @default("Sunday")
  startTime            Int                      @default(0)
  endTime              Int                      @default(1440)
  bufferTime           Int                      @default(0)
  hideBranding         Boolean                  @default(false)
  theme                String?
  createdDate          DateTime                 @default(now()) @map(name: "created")
  trialEndsAt          DateTime?
  defaultScheduleId    Int?
  completedOnboarding  Boolean                  @default(false)
  locale               String?
  timeFormat           Int?                     @default(12)
  twoFactorSecret      String?
  twoFactorEnabled     Boolean                  @default(false)
  identityProvider     EnumUserIdentityProvider @default(CAL)
  identityProviderId   String?
  invitedTo            Int?
  plan                 EnumUserPlan             @default(TRIAL)
  brandColor           String                   @default("#292929")
  darkBrandColor       String                   @default("#fafafa")
  away                 Boolean                  @default(false)
  allowDynamicBooking  Boolean?                 @default(true)
  metadata             Json?
  verified             Boolean?                 @default(false)
  role                 EnumUserRole             @default(USER)
  disableImpersonation Boolean                  @default(false)
  eventTypes           EventType[]
  credentials          Credential[]
  destinationCalendar  DestinationCalendar?
  teams                Membership[]
  bookings             Booking[]
  schedules            Schedule[]
  availability         Availability[]
  selectedCalendars    SelectedCalendar[]
  webhooks             Webhook[]
  impersonatedUsers    Impersonation[]          @relation(name: "impersonatedUser")
  impersonatedBy       Impersonation[]          @relation(name: "ImpersonationImpersonatedByUserImpersonatedBy")
  apiKeys              ApiKey[]
  accounts             Account[]
  sessions             Session[]
  feedback             Feedback[]
  workflows            Workflow[]

  @@map(name: "users")
}

model Team {
  id           Int          @id @default(autoincrement())
  name         String?
  slug         String?      @unique
  logo         String?
  bio          String?
  hideBranding Boolean      @default(false)
  eventTypes   EventType[]
  members      Membership[]
}

model Membership {
  id       Int                @id @default(autoincrement())
  accepted Boolean            @default(false)
  role     EnumMembershipRole
  team     Team               @relation(fields: [teamId], references: [id])
  teamId   Int
  user     User               @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([userId, teamId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model BookingReference {
  id                 Int      @id @default(autoincrement())
  typeField          String   @map("type")
  uid                String
  meetingId          String?
  meetingPassword    String?
  meetingUrl         String?
  booking            Booking? @relation(fields: [bookingId], references: [id])
  bookingId          Int?
  externalCalendarId String?
  deleted            Boolean?
}

model Attendee {
  id        Int      @id @default(autoincrement())
  email     String
  name      String
  timeZone  String
  locale    String?  @default("en")
  booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId Int?
}

model DailyEventReference {
  id         Int      @id @default(autoincrement())
  dailyurl   String   @default("dailycallurl")
  dailytoken String   @default("dailytoken")
  booking    Booking? @relation(fields: [bookingId], references: [id])
  bookingId  Int?     @unique
}

model Booking {
  id                  Int                  @id @default(autoincrement())
  uid                 String               @unique
  user                User?                @relation(fields: [userId], references: [id])
  userId              Int?
  eventType           EventType?           @relation(fields: [eventTypeId], references: [id])
  eventTypeId         Int?
  title               String
  description         String?
  customInputs        Json?
  startTime           DateTime
  endTime             DateTime
  location            String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime?
  status              EnumBookingStatus    @default(ACCEPTED)
  paid                Boolean              @default(false)
  cancellationReason  String?
  rejectionReason     String?
  dynamicEventSlugRef String?
  dynamicGroupSlugRef String?
  rescheduled         Boolean?
  fromReschedule      String?
  recurringEventId    String?
  smsReminderNumber   String?
  destinationCalendar DestinationCalendar?
  references          BookingReference[]
  attendees           Attendee[]
  dailyRef            DailyEventReference?
  payment             Payment[]
  workflowReminders   WorkflowReminder[]
}

model Schedule {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  name         String
  timeZone     String?
  eventType    EventType[]
  availability Availability[]
}

model Availability {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id])
  userId      Int?
  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int?
  days        Int
  startTime   DateTime   @db.Time
  endTime     DateTime   @db.Time
  date        DateTime?  @db.Date
  schedule    Schedule?  @relation(fields: [scheduleId], references: [id])
  scheduleId  Int?
}

model SelectedCalendar {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id])
  userId      Int
  integration String
  externalId  String

  @@unique([userId, integration, externalId])
}

model EventTypeCustomInput {
  id          Int                          @id @default(autoincrement())
  eventType   EventType                    @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int
  label       String
  type        EnumEventTypeCustomInputType
  required    Boolean
  placeholder String                       @default("")
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime
}

model ReminderMail {
  id             Int                          @id @default(autoincrement())
  referenceId    Int
  reminderType   EnumReminderMailReminderType
  elapsedMinutes Int
  createdAt      DateTime                     @default(now())
}

model Payment {
  id         Int             @id @default(autoincrement())
  uid        String          @unique
  type       EnumPaymentType
  booking    Booking?        @relation(fields: [bookingId], references: [id])
  bookingId  Int?
  amount     Int
  fee        Int
  currency   String
  success    Boolean
  refunded   Boolean
  data       Json
  externalId String          @unique
}

model Webhook {
  id              String                     @id @unique @default(cuid())
  subscriberUrl   String
  payloadTemplate String?
  createdAt       DateTime                   @default(now())
  active          Boolean                    @default(true)
  eventTriggers   EnumWebhookEventTriggers[]
  user            User?                      @relation(fields: [userId], references: [id])
  userId          Int?
  eventType       EventType?                 @relation(fields: [eventTypeId], references: [id])
  eventTypeId     Int?
  appField        AppModel?                  @relation(fields: [appId], references: [id])
  appId           String?
  secret          String?
}

model Impersonation {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  impersonatedUser   User     @relation(name: "impersonatedUser", fields: [impersonatedUserId], references: [id])
  impersonatedUserId Int
  impersonatedBy     User     @relation(name: "ImpersonationImpersonatedByUserImpersonatedBy", fields: [impersonatedById], references: [id])
  impersonatedById   Int

  @@map("Impersonations")
}

model ApiKey {
  id         String    @id @unique @default(cuid())
  note       String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  hashedKey  String    @unique
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  appField   AppModel? @relation(fields: [appId], references: [id])
  appId      String?
}

model HashedLink {
  id          Int       @id @default(autoincrement())
  link        String    @unique
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int       @unique
}

model Account {
  id                String  @id @default(cuid())
  typeField         String  @map("type")
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")
  user              User?   @relation(fields: [userId], references: [id])
  userId            Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id])
  userId       Int?
}

model AppModel {
  id          String                   @id @unique @default(cuid()) @map("slug")
  dirName     String                   @unique
  keys        Json?
  categories  EnumAppModelCategories[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  credentials Credential[]
  webhook     Webhook[]
  apiKey      ApiKey[]

  @@map("App")
}

model Feedback {
  id      Int      @id @default(autoincrement())
  date    DateTime
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  rating  String
  comment String?
}

model WorkflowStep {
  id                Int                      @id @default(autoincrement())
  stepNumber        Int
  action            EnumWorkflowStepAction
  workflow          Workflow                 @relation(fields: [workflowId], references: [id])
  workflowId        Int
  sendTo            String?
  reminderBody      String?
  emailSubject      String?
  template          EnumWorkflowStepTemplate @default(REMINDER)
  workflowReminders WorkflowReminder[]
}

model Workflow {
  id       Int                    @id @default(autoincrement())
  name     String
  user     User                   @relation(fields: [userId], references: [id])
  userId   Int
  trigger  EnumWorkflowTrigger
  time     Int?
  timeUnit EnumWorkflowTimeUnit?
  steps    WorkflowStep[]
  activeOn WorkflowsOnEventType[]
}

model WorkflowsOnEventType {
  id          Int       @id @default(autoincrement())
  workflow    Workflow  @relation(fields: [workflowId], references: [id])
  workflowId  Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int

  @@map("WorkflowsOnEventTypes")
}

model WorkflowReminder {
  id             Int                        @id @default(autoincrement())
  booking        Booking?                   @relation(fields: [bookingUid], references: [id])
  bookingUid     Int?
  method         EnumWorkflowReminderMethod
  scheduledDate  DateTime
  referenceId    String?                    @unique
  scheduled      Boolean
  workflowStep   WorkflowStep               @relation(fields: [workflowStepId], references: [id])
  workflowStepId Int
}

enum EnumEventTypePeriodType {
  UNLIMITED
  ROLLING
  RANGE
}

enum EnumEventTypeSchedulingType {
  ROUND_ROBIN
  COLLECTIVE
}

enum EnumUserIdentityProvider {
  CAL
  GOOGLE
  SAML
}

enum EnumUserPlan {
  FREE
  TRIAL
  PRO
}

enum EnumUserRole {
  USER
  ADMIN
}

enum EnumMembershipRole {
  MEMBER
  ADMIN
  OWNER
}

enum EnumBookingStatus {
  CANCELLED
  ACCEPTED
  REJECTED
  PENDING
}

enum EnumEventTypeCustomInputType {
  TEXT
  TEXTLONG
  NUMBER
  BOOL
}

enum EnumReminderMailReminderType {
  PENDING_BOOKING_CONFIRMATION
}

enum EnumPaymentType {
  STRIPE
}

enum EnumWebhookEventTriggers {
  BOOKING_CREATED
  BOOKING_RESCHEDULED
  BOOKING_CANCELLED
}

enum EnumAppModelCategories {
  calendar
  messaging
  other
  payment
  video
  web3
}

enum EnumWorkflowStepAction {
  EMAIL_HOST
  EMAIL_ATTENDEE
  SMS_ATTENDEE
  SMS_NUMBER
}

enum EnumWorkflowStepTemplate {
  REMINDER
  CUSTOM
}

enum EnumWorkflowTrigger {
  BEFORE_EVENT
  EVENT_CANCELLED
  NEW_EVENT
}

enum EnumWorkflowTimeUnit {
  DAY
  HOUR
  MINUTE
}

enum EnumWorkflowReminderMethod {
  EMAIL
  SMS
}
