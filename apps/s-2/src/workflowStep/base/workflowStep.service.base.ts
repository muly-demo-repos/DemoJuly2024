/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkflowStep as PrismaWorkflowStep,
  WorkflowReminder as PrismaWorkflowReminder,
  Workflow as PrismaWorkflow,
} from "@prisma/client";

export class WorkflowStepServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkflowStepCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workflowStep.count(args);
  }

  async workflowSteps(
    args: Prisma.WorkflowStepFindManyArgs
  ): Promise<PrismaWorkflowStep[]> {
    return this.prisma.workflowStep.findMany(args);
  }
  async workflowStep(
    args: Prisma.WorkflowStepFindUniqueArgs
  ): Promise<PrismaWorkflowStep | null> {
    return this.prisma.workflowStep.findUnique(args);
  }
  async createWorkflowStep(
    args: Prisma.WorkflowStepCreateArgs
  ): Promise<PrismaWorkflowStep> {
    return this.prisma.workflowStep.create(args);
  }
  async updateWorkflowStep(
    args: Prisma.WorkflowStepUpdateArgs
  ): Promise<PrismaWorkflowStep> {
    return this.prisma.workflowStep.update(args);
  }
  async deleteWorkflowStep(
    args: Prisma.WorkflowStepDeleteArgs
  ): Promise<PrismaWorkflowStep> {
    return this.prisma.workflowStep.delete(args);
  }

  async findWorkflowReminders(
    parentId: number,
    args: Prisma.WorkflowReminderFindManyArgs
  ): Promise<PrismaWorkflowReminder[]> {
    return this.prisma.workflowStep
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workflowReminders(args);
  }

  async getWorkflow(parentId: number): Promise<PrismaWorkflow | null> {
    return this.prisma.workflowStep
      .findUnique({
        where: { id: parentId },
      })
      .workflow();
  }
}
