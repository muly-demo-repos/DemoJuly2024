/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  HashedLink as PrismaHashedLink,
  EventType as PrismaEventType,
} from "@prisma/client";

export class HashedLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.HashedLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.hashedLink.count(args);
  }

  async hashedLinks(
    args: Prisma.HashedLinkFindManyArgs
  ): Promise<PrismaHashedLink[]> {
    return this.prisma.hashedLink.findMany(args);
  }
  async hashedLink(
    args: Prisma.HashedLinkFindUniqueArgs
  ): Promise<PrismaHashedLink | null> {
    return this.prisma.hashedLink.findUnique(args);
  }
  async createHashedLink(
    args: Prisma.HashedLinkCreateArgs
  ): Promise<PrismaHashedLink> {
    return this.prisma.hashedLink.create(args);
  }
  async updateHashedLink(
    args: Prisma.HashedLinkUpdateArgs
  ): Promise<PrismaHashedLink> {
    return this.prisma.hashedLink.update(args);
  }
  async deleteHashedLink(
    args: Prisma.HashedLinkDeleteArgs
  ): Promise<PrismaHashedLink> {
    return this.prisma.hashedLink.delete(args);
  }

  async getEventType(parentId: number): Promise<PrismaEventType | null> {
    return this.prisma.hashedLink
      .findUnique({
        where: { id: parentId },
      })
      .eventType();
  }
}
