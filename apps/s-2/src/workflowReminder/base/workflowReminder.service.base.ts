/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkflowReminder as PrismaWorkflowReminder,
  Booking as PrismaBooking,
  WorkflowStep as PrismaWorkflowStep,
} from "@prisma/client";

export class WorkflowReminderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkflowReminderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workflowReminder.count(args);
  }

  async workflowReminders(
    args: Prisma.WorkflowReminderFindManyArgs
  ): Promise<PrismaWorkflowReminder[]> {
    return this.prisma.workflowReminder.findMany(args);
  }
  async workflowReminder(
    args: Prisma.WorkflowReminderFindUniqueArgs
  ): Promise<PrismaWorkflowReminder | null> {
    return this.prisma.workflowReminder.findUnique(args);
  }
  async createWorkflowReminder(
    args: Prisma.WorkflowReminderCreateArgs
  ): Promise<PrismaWorkflowReminder> {
    return this.prisma.workflowReminder.create(args);
  }
  async updateWorkflowReminder(
    args: Prisma.WorkflowReminderUpdateArgs
  ): Promise<PrismaWorkflowReminder> {
    return this.prisma.workflowReminder.update(args);
  }
  async deleteWorkflowReminder(
    args: Prisma.WorkflowReminderDeleteArgs
  ): Promise<PrismaWorkflowReminder> {
    return this.prisma.workflowReminder.delete(args);
  }

  async getBooking(parentId: number): Promise<PrismaBooking | null> {
    return this.prisma.workflowReminder
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }

  async getWorkflowStep(parentId: number): Promise<PrismaWorkflowStep | null> {
    return this.prisma.workflowReminder
      .findUnique({
        where: { id: parentId },
      })
      .workflowStep();
  }
}
