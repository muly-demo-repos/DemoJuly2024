/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BookingReference as PrismaBookingReference,
  Booking as PrismaBooking,
} from "@prisma/client";

export class BookingReferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BookingReferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bookingReference.count(args);
  }

  async bookingReferences(
    args: Prisma.BookingReferenceFindManyArgs
  ): Promise<PrismaBookingReference[]> {
    return this.prisma.bookingReference.findMany(args);
  }
  async bookingReference(
    args: Prisma.BookingReferenceFindUniqueArgs
  ): Promise<PrismaBookingReference | null> {
    return this.prisma.bookingReference.findUnique(args);
  }
  async createBookingReference(
    args: Prisma.BookingReferenceCreateArgs
  ): Promise<PrismaBookingReference> {
    return this.prisma.bookingReference.create(args);
  }
  async updateBookingReference(
    args: Prisma.BookingReferenceUpdateArgs
  ): Promise<PrismaBookingReference> {
    return this.prisma.bookingReference.update(args);
  }
  async deleteBookingReference(
    args: Prisma.BookingReferenceDeleteArgs
  ): Promise<PrismaBookingReference> {
    return this.prisma.bookingReference.delete(args);
  }

  async getBooking(parentId: number): Promise<PrismaBooking | null> {
    return this.prisma.bookingReference
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }
}
