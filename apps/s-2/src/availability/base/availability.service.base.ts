/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Availability as PrismaAvailability,
  User as PrismaUser,
  EventType as PrismaEventType,
  Schedule as PrismaSchedule,
} from "@prisma/client";

export class AvailabilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AvailabilityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.availability.count(args);
  }

  async availabilities(
    args: Prisma.AvailabilityFindManyArgs
  ): Promise<PrismaAvailability[]> {
    return this.prisma.availability.findMany(args);
  }
  async availability(
    args: Prisma.AvailabilityFindUniqueArgs
  ): Promise<PrismaAvailability | null> {
    return this.prisma.availability.findUnique(args);
  }
  async createAvailability(
    args: Prisma.AvailabilityCreateArgs
  ): Promise<PrismaAvailability> {
    return this.prisma.availability.create(args);
  }
  async updateAvailability(
    args: Prisma.AvailabilityUpdateArgs
  ): Promise<PrismaAvailability> {
    return this.prisma.availability.update(args);
  }
  async deleteAvailability(
    args: Prisma.AvailabilityDeleteArgs
  ): Promise<PrismaAvailability> {
    return this.prisma.availability.delete(args);
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.availability
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getEventType(parentId: number): Promise<PrismaEventType | null> {
    return this.prisma.availability
      .findUnique({
        where: { id: parentId },
      })
      .eventType();
  }

  async getSchedule(parentId: number): Promise<PrismaSchedule | null> {
    return this.prisma.availability
      .findUnique({
        where: { id: parentId },
      })
      .schedule();
  }
}
