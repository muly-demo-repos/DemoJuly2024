/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApiKey as PrismaApiKey,
  User as PrismaUser,
  AppModel as PrismaAppModel,
} from "@prisma/client";

export class ApiKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ApiKeyCountArgs, "select">): Promise<number> {
    return this.prisma.apiKey.count(args);
  }

  async apiKeys(args: Prisma.ApiKeyFindManyArgs): Promise<PrismaApiKey[]> {
    return this.prisma.apiKey.findMany(args);
  }
  async apiKey(
    args: Prisma.ApiKeyFindUniqueArgs
  ): Promise<PrismaApiKey | null> {
    return this.prisma.apiKey.findUnique(args);
  }
  async createApiKey(args: Prisma.ApiKeyCreateArgs): Promise<PrismaApiKey> {
    return this.prisma.apiKey.create(args);
  }
  async updateApiKey(args: Prisma.ApiKeyUpdateArgs): Promise<PrismaApiKey> {
    return this.prisma.apiKey.update(args);
  }
  async deleteApiKey(args: Prisma.ApiKeyDeleteArgs): Promise<PrismaApiKey> {
    return this.prisma.apiKey.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.apiKey
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getAppField(parentId: string): Promise<PrismaAppModel | null> {
    return this.prisma.apiKey
      .findUnique({
        where: { id: parentId },
      })
      .appField();
  }
}
