/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SelectedCalendar as PrismaSelectedCalendar,
  User as PrismaUser,
} from "@prisma/client";

export class SelectedCalendarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SelectedCalendarCountArgs, "select">
  ): Promise<number> {
    return this.prisma.selectedCalendar.count(args);
  }

  async selectedCalendars(
    args: Prisma.SelectedCalendarFindManyArgs
  ): Promise<PrismaSelectedCalendar[]> {
    return this.prisma.selectedCalendar.findMany(args);
  }
  async selectedCalendar(
    args: Prisma.SelectedCalendarFindUniqueArgs
  ): Promise<PrismaSelectedCalendar | null> {
    return this.prisma.selectedCalendar.findUnique(args);
  }
  async createSelectedCalendar(
    args: Prisma.SelectedCalendarCreateArgs
  ): Promise<PrismaSelectedCalendar> {
    return this.prisma.selectedCalendar.create(args);
  }
  async updateSelectedCalendar(
    args: Prisma.SelectedCalendarUpdateArgs
  ): Promise<PrismaSelectedCalendar> {
    return this.prisma.selectedCalendar.update(args);
  }
  async deleteSelectedCalendar(
    args: Prisma.SelectedCalendarDeleteArgs
  ): Promise<PrismaSelectedCalendar> {
    return this.prisma.selectedCalendar.delete(args);
  }

  async getUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.selectedCalendar
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
