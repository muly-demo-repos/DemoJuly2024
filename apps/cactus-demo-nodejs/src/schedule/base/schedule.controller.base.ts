/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScheduleService } from "../schedule.service";
import { ScheduleCreateInput } from "./ScheduleCreateInput";
import { Schedule } from "./Schedule";
import { ScheduleFindManyArgs } from "./ScheduleFindManyArgs";
import { ScheduleWhereUniqueInput } from "./ScheduleWhereUniqueInput";
import { ScheduleUpdateInput } from "./ScheduleUpdateInput";
import { EventTypeFindManyArgs } from "../../eventType/base/EventTypeFindManyArgs";
import { EventType } from "../../eventType/base/EventType";
import { EventTypeWhereUniqueInput } from "../../eventType/base/EventTypeWhereUniqueInput";
import { AvailabilityFindManyArgs } from "../../availability/base/AvailabilityFindManyArgs";
import { Availability } from "../../availability/base/Availability";
import { AvailabilityWhereUniqueInput } from "../../availability/base/AvailabilityWhereUniqueInput";

export class ScheduleControllerBase {
  constructor(protected readonly service: ScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Schedule })
  async createSchedule(
    @common.Body() data: ScheduleCreateInput
  ): Promise<Schedule> {
    return await this.service.createSchedule({
      data: {
        ...data,

        user: {
          connect: data.user,
        },
      },
      select: {
        id: true,

        user: {
          select: {
            id: true,
          },
        },

        name: true,
        timeZone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Schedule] })
  @ApiNestedQuery(ScheduleFindManyArgs)
  async schedules(@common.Req() request: Request): Promise<Schedule[]> {
    const args = plainToClass(ScheduleFindManyArgs, request.query);
    return this.service.schedules({
      ...args,
      select: {
        id: true,

        user: {
          select: {
            id: true,
          },
        },

        name: true,
        timeZone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Schedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async schedule(
    @common.Param() params: ScheduleWhereUniqueInput
  ): Promise<Schedule | null> {
    const result = await this.service.schedule({
      where: params,
      select: {
        id: true,

        user: {
          select: {
            id: true,
          },
        },

        name: true,
        timeZone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Schedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSchedule(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() data: ScheduleUpdateInput
  ): Promise<Schedule | null> {
    try {
      return await this.service.updateSchedule({
        where: params,
        data: {
          ...data,

          user: {
            connect: data.user,
          },
        },
        select: {
          id: true,

          user: {
            select: {
              id: true,
            },
          },

          name: true,
          timeZone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Schedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSchedule(
    @common.Param() params: ScheduleWhereUniqueInput
  ): Promise<Schedule | null> {
    try {
      return await this.service.deleteSchedule({
        where: params,
        select: {
          id: true,

          user: {
            select: {
              id: true,
            },
          },

          name: true,
          timeZone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/eventType")
  @ApiNestedQuery(EventTypeFindManyArgs)
  async findEventType(
    @common.Req() request: Request,
    @common.Param() params: ScheduleWhereUniqueInput
  ): Promise<EventType[]> {
    const query = plainToClass(EventTypeFindManyArgs, request.query);
    const results = await this.service.findEventType(params.id, {
      ...query,
      select: {
        id: true,
        title: true,
        slug: true,
        description: true,
        position: true,
        locations: true,
        length: true,
        hidden: true,
        userId: true,

        team: {
          select: {
            id: true,
          },
        },

        eventName: true,
        timeZone: true,
        periodType: true,
        periodStartDate: true,
        periodEndDate: true,
        periodDays: true,
        periodCountCalendarDays: true,
        requiresConfirmation: true,
        recurringEvent: true,
        disableGuests: true,
        hideCalendarNotes: true,
        minimumBookingNotice: true,
        beforeEventBuffer: true,
        afterEventBuffer: true,
        seatsPerTimeSlot: true,
        schedulingType: true,

        schedule: {
          select: {
            id: true,
          },
        },

        price: true,
        currency: true,
        slotInterval: true,
        metadata: true,
        successRedirectUrl: true,

        destinationCalendar: {
          select: {
            id: true,
          },
        },

        hashedLink: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/eventType")
  async connectEventType(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        connect: body,
      },
    };
    await this.service.updateSchedule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/eventType")
  async updateEventType(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        set: body,
      },
    };
    await this.service.updateSchedule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/eventType")
  async disconnectEventType(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() body: EventTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      eventType: {
        disconnect: body,
      },
    };
    await this.service.updateSchedule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/availability")
  @ApiNestedQuery(AvailabilityFindManyArgs)
  async findAvailability(
    @common.Req() request: Request,
    @common.Param() params: ScheduleWhereUniqueInput
  ): Promise<Availability[]> {
    const query = plainToClass(AvailabilityFindManyArgs, request.query);
    const results = await this.service.findAvailability(params.id, {
      ...query,
      select: {
        id: true,

        user: {
          select: {
            id: true,
          },
        },

        eventType: {
          select: {
            id: true,
          },
        },

        days: true,
        startTime: true,
        endTime: true,
        date: true,

        schedule: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/availability")
  async connectAvailability(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availability: {
        connect: body,
      },
    };
    await this.service.updateSchedule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/availability")
  async updateAvailability(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availability: {
        set: body,
      },
    };
    await this.service.updateSchedule({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/availability")
  async disconnectAvailability(
    @common.Param() params: ScheduleWhereUniqueInput,
    @common.Body() body: AvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      availability: {
        disconnect: body,
      },
    };
    await this.service.updateSchedule({
      where: params,
      data,
      select: { id: true },
    });
  }
}
