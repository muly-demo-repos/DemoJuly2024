/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VerificationToken as PrismaVerificationToken,
} from "@prisma/client";

export class VerificationTokenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VerificationTokenCountArgs, "select">
  ): Promise<number> {
    return this.prisma.verificationToken.count(args);
  }

  async verificationTokens(
    args: Prisma.VerificationTokenFindManyArgs
  ): Promise<PrismaVerificationToken[]> {
    return this.prisma.verificationToken.findMany(args);
  }
  async verificationToken(
    args: Prisma.VerificationTokenFindUniqueArgs
  ): Promise<PrismaVerificationToken | null> {
    return this.prisma.verificationToken.findUnique(args);
  }
  async createVerificationToken(
    args: Prisma.VerificationTokenCreateArgs
  ): Promise<PrismaVerificationToken> {
    return this.prisma.verificationToken.create(args);
  }
  async updateVerificationToken(
    args: Prisma.VerificationTokenUpdateArgs
  ): Promise<PrismaVerificationToken> {
    return this.prisma.verificationToken.update(args);
  }
  async deleteVerificationToken(
    args: Prisma.VerificationTokenDeleteArgs
  ): Promise<PrismaVerificationToken> {
    return this.prisma.verificationToken.delete(args);
  }
}
