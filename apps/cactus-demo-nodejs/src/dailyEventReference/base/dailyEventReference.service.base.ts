/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DailyEventReference as PrismaDailyEventReference,
  Booking as PrismaBooking,
} from "@prisma/client";

export class DailyEventReferenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DailyEventReferenceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dailyEventReference.count(args);
  }

  async dailyEventReferences(
    args: Prisma.DailyEventReferenceFindManyArgs
  ): Promise<PrismaDailyEventReference[]> {
    return this.prisma.dailyEventReference.findMany(args);
  }
  async dailyEventReference(
    args: Prisma.DailyEventReferenceFindUniqueArgs
  ): Promise<PrismaDailyEventReference | null> {
    return this.prisma.dailyEventReference.findUnique(args);
  }
  async createDailyEventReference(
    args: Prisma.DailyEventReferenceCreateArgs
  ): Promise<PrismaDailyEventReference> {
    return this.prisma.dailyEventReference.create(args);
  }
  async updateDailyEventReference(
    args: Prisma.DailyEventReferenceUpdateArgs
  ): Promise<PrismaDailyEventReference> {
    return this.prisma.dailyEventReference.update(args);
  }
  async deleteDailyEventReference(
    args: Prisma.DailyEventReferenceDeleteArgs
  ): Promise<PrismaDailyEventReference> {
    return this.prisma.dailyEventReference.delete(args);
  }

  async getBooking(parentId: number): Promise<PrismaBooking | null> {
    return this.prisma.dailyEventReference
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }
}
