/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EventType as PrismaEventType,
  User as PrismaUser,
  Booking as PrismaBooking,
  Availability as PrismaAvailability,
  EventTypeCustomInput as PrismaEventTypeCustomInput,
  Webhook as PrismaWebhook,
  WorkflowsOnEventType as PrismaWorkflowsOnEventType,
  Team as PrismaTeam,
  Schedule as PrismaSchedule,
  DestinationCalendar as PrismaDestinationCalendar,
  HashedLink as PrismaHashedLink,
} from "@prisma/client";

export class EventTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventType.count(args);
  }

  async eventTypes(
    args: Prisma.EventTypeFindManyArgs
  ): Promise<PrismaEventType[]> {
    return this.prisma.eventType.findMany(args);
  }
  async eventType(
    args: Prisma.EventTypeFindUniqueArgs
  ): Promise<PrismaEventType | null> {
    return this.prisma.eventType.findUnique(args);
  }
  async createEventType(
    args: Prisma.EventTypeCreateArgs
  ): Promise<PrismaEventType> {
    return this.prisma.eventType.create(args);
  }
  async updateEventType(
    args: Prisma.EventTypeUpdateArgs
  ): Promise<PrismaEventType> {
    return this.prisma.eventType.update(args);
  }
  async deleteEventType(
    args: Prisma.EventTypeDeleteArgs
  ): Promise<PrismaEventType> {
    return this.prisma.eventType.delete(args);
  }

  async findUsers(
    parentId: number,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findBookings(
    parentId: number,
    args: Prisma.BookingFindManyArgs
  ): Promise<PrismaBooking[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bookings(args);
  }

  async findAvailability(
    parentId: number,
    args: Prisma.AvailabilityFindManyArgs
  ): Promise<PrismaAvailability[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .availability(args);
  }

  async findCustomInputs(
    parentId: number,
    args: Prisma.EventTypeCustomInputFindManyArgs
  ): Promise<PrismaEventTypeCustomInput[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customInputs(args);
  }

  async findWebhooks(
    parentId: number,
    args: Prisma.WebhookFindManyArgs
  ): Promise<PrismaWebhook[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .webhooks(args);
  }

  async findWorkflows(
    parentId: number,
    args: Prisma.WorkflowsOnEventTypeFindManyArgs
  ): Promise<PrismaWorkflowsOnEventType[]> {
    return this.prisma.eventType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workflows(args);
  }

  async getTeam(parentId: number): Promise<PrismaTeam | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }

  async getSchedule(parentId: number): Promise<PrismaSchedule | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .schedule();
  }

  async getDestinationCalendar(
    parentId: number
  ): Promise<PrismaDestinationCalendar | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .destinationCalendar();
  }

  async getHashedLink(parentId: number): Promise<PrismaHashedLink | null> {
    return this.prisma.eventType
      .findUnique({
        where: { id: parentId },
      })
      .hashedLink();
  }
}
