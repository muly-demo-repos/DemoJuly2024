/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Impersonation as PrismaImpersonation,
  User as PrismaUser,
} from "@prisma/client";

export class ImpersonationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImpersonationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.impersonation.count(args);
  }

  async impersonations(
    args: Prisma.ImpersonationFindManyArgs
  ): Promise<PrismaImpersonation[]> {
    return this.prisma.impersonation.findMany(args);
  }
  async impersonation(
    args: Prisma.ImpersonationFindUniqueArgs
  ): Promise<PrismaImpersonation | null> {
    return this.prisma.impersonation.findUnique(args);
  }
  async createImpersonation(
    args: Prisma.ImpersonationCreateArgs
  ): Promise<PrismaImpersonation> {
    return this.prisma.impersonation.create(args);
  }
  async updateImpersonation(
    args: Prisma.ImpersonationUpdateArgs
  ): Promise<PrismaImpersonation> {
    return this.prisma.impersonation.update(args);
  }
  async deleteImpersonation(
    args: Prisma.ImpersonationDeleteArgs
  ): Promise<PrismaImpersonation> {
    return this.prisma.impersonation.delete(args);
  }

  async getImpersonatedUser(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.impersonation
      .findUnique({
        where: { id: parentId },
      })
      .impersonatedUser();
  }

  async getImpersonatedBy(parentId: number): Promise<PrismaUser | null> {
    return this.prisma.impersonation
      .findUnique({
        where: { id: parentId },
      })
      .impersonatedBy();
  }
}
