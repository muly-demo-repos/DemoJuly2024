/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Sale as PrismaSale,
  Car as PrismaCar,
  Customer as PrismaCustomer,
  Salesperson as PrismaSalesperson,
} from "@prisma/client";

export class SaleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SaleCountArgs, "select">): Promise<number> {
    return this.prisma.sale.count(args);
  }

  async sales(args: Prisma.SaleFindManyArgs): Promise<PrismaSale[]> {
    return this.prisma.sale.findMany(args);
  }
  async sale(args: Prisma.SaleFindUniqueArgs): Promise<PrismaSale | null> {
    return this.prisma.sale.findUnique(args);
  }
  async createSale(args: Prisma.SaleCreateArgs): Promise<PrismaSale> {
    return this.prisma.sale.create(args);
  }
  async updateSale(args: Prisma.SaleUpdateArgs): Promise<PrismaSale> {
    return this.prisma.sale.update(args);
  }
  async deleteSale(args: Prisma.SaleDeleteArgs): Promise<PrismaSale> {
    return this.prisma.sale.delete(args);
  }

  async getCar(parentId: string): Promise<PrismaCar | null> {
    return this.prisma.sale
      .findUnique({
        where: { id: parentId },
      })
      .car();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.sale
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getSalesperson(parentId: string): Promise<PrismaSalesperson | null> {
    return this.prisma.sale
      .findUnique({
        where: { id: parentId },
      })
      .salesperson();
  }
}
